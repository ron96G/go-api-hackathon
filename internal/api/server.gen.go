// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"context"
	"fmt"

	"github.com/gofiber/fiber/v2"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List multiple pets
	// (GET /pets)
	ListPets(c *fiber.Ctx) error
	// Add a new pet to the store.
	// (POST /pets)
	AddPet(c *fiber.Ctx) error
	// Deletes a pet.
	// (DELETE /pets/{petId})
	DeletePet(c *fiber.Ctx, petId PetId) error
	// Find pet by ID.
	// (GET /pets/{petId})
	GetPetById(c *fiber.Ctx, petId PetId) error
	// Update an existing pet.
	// (PUT /pets/{petId})
	UpdatePet(c *fiber.Ctx, petId PetId) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// ListPets operation middleware
func (siw *ServerInterfaceWrapper) ListPets(c *fiber.Ctx) error {

	c.Context().SetUserValue(Petstore_authScopes, []string{"write:pets", "read:pets"})

	return siw.Handler.ListPets(c)
}

// AddPet operation middleware
func (siw *ServerInterfaceWrapper) AddPet(c *fiber.Ctx) error {

	c.Context().SetUserValue(Petstore_authScopes, []string{"write:pets", "read:pets"})

	return siw.Handler.AddPet(c)
}

// DeletePet operation middleware
func (siw *ServerInterfaceWrapper) DeletePet(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "petId" -------------
	var petId PetId

	err = runtime.BindStyledParameterWithOptions("simple", "petId", c.Params("petId"), &petId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter petId: %w", err).Error())
	}

	c.Context().SetUserValue(Petstore_authScopes, []string{"write:pets", "read:pets"})

	return siw.Handler.DeletePet(c, petId)
}

// GetPetById operation middleware
func (siw *ServerInterfaceWrapper) GetPetById(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "petId" -------------
	var petId PetId

	err = runtime.BindStyledParameterWithOptions("simple", "petId", c.Params("petId"), &petId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter petId: %w", err).Error())
	}

	c.Context().SetUserValue(Petstore_authScopes, []string{"write:pets", "read:pets"})

	return siw.Handler.GetPetById(c, petId)
}

// UpdatePet operation middleware
func (siw *ServerInterfaceWrapper) UpdatePet(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "petId" -------------
	var petId PetId

	err = runtime.BindStyledParameterWithOptions("simple", "petId", c.Params("petId"), &petId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter petId: %w", err).Error())
	}

	c.Context().SetUserValue(Petstore_authScopes, []string{"write:pets", "read:pets"})

	return siw.Handler.UpdatePet(c, petId)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(fiber.Handler(m))
	}

	router.Get(options.BaseURL+"/pets", wrapper.ListPets)

	router.Post(options.BaseURL+"/pets", wrapper.AddPet)

	router.Delete(options.BaseURL+"/pets/:petId", wrapper.DeletePet)

	router.Get(options.BaseURL+"/pets/:petId", wrapper.GetPetById)

	router.Put(options.BaseURL+"/pets/:petId", wrapper.UpdatePet)

}

type ErrorResponseApplicationProblemPlusJSONResponse ApiProblem

type ListPetsRequestObject struct {
}

type ListPetsResponseObject interface {
	VisitListPetsResponse(ctx *fiber.Ctx) error
}

type ListPets200JSONResponse []Pet

func (response ListPets200JSONResponse) VisitListPetsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type ListPets400ApplicationProblemPlusJSONResponse struct {
	ErrorResponseApplicationProblemPlusJSONResponse
}

func (response ListPets400ApplicationProblemPlusJSONResponse) VisitListPetsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/problem+json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type ListPets500ApplicationProblemPlusJSONResponse ApiProblem

func (response ListPets500ApplicationProblemPlusJSONResponse) VisitListPetsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/problem+json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type ListPetsdefaultApplicationProblemPlusJSONResponse struct {
	Body       ApiProblem
	StatusCode int
}

func (response ListPetsdefaultApplicationProblemPlusJSONResponse) VisitListPetsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/problem+json")
	ctx.Status(response.StatusCode)

	return ctx.JSON(&response.Body)
}

type AddPetRequestObject struct {
	Body *AddPetJSONRequestBody
}

type AddPetResponseObject interface {
	VisitAddPetResponse(ctx *fiber.Ctx) error
}

type AddPet200JSONResponse Pet

func (response AddPet200JSONResponse) VisitAddPetResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type AddPet400ApplicationProblemPlusJSONResponse struct {
	ErrorResponseApplicationProblemPlusJSONResponse
}

func (response AddPet400ApplicationProblemPlusJSONResponse) VisitAddPetResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/problem+json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type AddPet500ApplicationProblemPlusJSONResponse ApiProblem

func (response AddPet500ApplicationProblemPlusJSONResponse) VisitAddPetResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/problem+json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type AddPetdefaultApplicationProblemPlusJSONResponse struct {
	Body       ApiProblem
	StatusCode int
}

func (response AddPetdefaultApplicationProblemPlusJSONResponse) VisitAddPetResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/problem+json")
	ctx.Status(response.StatusCode)

	return ctx.JSON(&response.Body)
}

type DeletePetRequestObject struct {
	PetId PetId `json:"petId"`
}

type DeletePetResponseObject interface {
	VisitDeletePetResponse(ctx *fiber.Ctx) error
}

type DeletePet204Response struct {
}

func (response DeletePet204Response) VisitDeletePetResponse(ctx *fiber.Ctx) error {
	ctx.Status(204)
	return nil
}

type DeletePet400ApplicationProblemPlusJSONResponse struct {
	ErrorResponseApplicationProblemPlusJSONResponse
}

func (response DeletePet400ApplicationProblemPlusJSONResponse) VisitDeletePetResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/problem+json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type DeletePet500ApplicationProblemPlusJSONResponse ApiProblem

func (response DeletePet500ApplicationProblemPlusJSONResponse) VisitDeletePetResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/problem+json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type DeletePetdefaultApplicationProblemPlusJSONResponse struct {
	Body       ApiProblem
	StatusCode int
}

func (response DeletePetdefaultApplicationProblemPlusJSONResponse) VisitDeletePetResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/problem+json")
	ctx.Status(response.StatusCode)

	return ctx.JSON(&response.Body)
}

type GetPetByIdRequestObject struct {
	PetId PetId `json:"petId"`
}

type GetPetByIdResponseObject interface {
	VisitGetPetByIdResponse(ctx *fiber.Ctx) error
}

type GetPetById200JSONResponse Pet

func (response GetPetById200JSONResponse) VisitGetPetByIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetPetById400ApplicationProblemPlusJSONResponse struct {
	ErrorResponseApplicationProblemPlusJSONResponse
}

func (response GetPetById400ApplicationProblemPlusJSONResponse) VisitGetPetByIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/problem+json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetPetById404ApplicationProblemPlusJSONResponse ApiProblem

func (response GetPetById404ApplicationProblemPlusJSONResponse) VisitGetPetByIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/problem+json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetPetById500ApplicationProblemPlusJSONResponse ApiProblem

func (response GetPetById500ApplicationProblemPlusJSONResponse) VisitGetPetByIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/problem+json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetPetByIddefaultApplicationProblemPlusJSONResponse struct {
	Body       ApiProblem
	StatusCode int
}

func (response GetPetByIddefaultApplicationProblemPlusJSONResponse) VisitGetPetByIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/problem+json")
	ctx.Status(response.StatusCode)

	return ctx.JSON(&response.Body)
}

type UpdatePetRequestObject struct {
	PetId PetId `json:"petId"`
	Body  *UpdatePetJSONRequestBody
}

type UpdatePetResponseObject interface {
	VisitUpdatePetResponse(ctx *fiber.Ctx) error
}

type UpdatePet200JSONResponse Pet

func (response UpdatePet200JSONResponse) VisitUpdatePetResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type UpdatePet400ApplicationProblemPlusJSONResponse struct {
	ErrorResponseApplicationProblemPlusJSONResponse
}

func (response UpdatePet400ApplicationProblemPlusJSONResponse) VisitUpdatePetResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/problem+json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type UpdatePet404ApplicationProblemPlusJSONResponse ApiProblem

func (response UpdatePet404ApplicationProblemPlusJSONResponse) VisitUpdatePetResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/problem+json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type UpdatePet500ApplicationProblemPlusJSONResponse ApiProblem

func (response UpdatePet500ApplicationProblemPlusJSONResponse) VisitUpdatePetResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/problem+json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type UpdatePetdefaultApplicationProblemPlusJSONResponse struct {
	Body       ApiProblem
	StatusCode int
}

func (response UpdatePetdefaultApplicationProblemPlusJSONResponse) VisitUpdatePetResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/problem+json")
	ctx.Status(response.StatusCode)

	return ctx.JSON(&response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List multiple pets
	// (GET /pets)
	ListPets(ctx context.Context, request ListPetsRequestObject) (ListPetsResponseObject, error)
	// Add a new pet to the store.
	// (POST /pets)
	AddPet(ctx context.Context, request AddPetRequestObject) (AddPetResponseObject, error)
	// Deletes a pet.
	// (DELETE /pets/{petId})
	DeletePet(ctx context.Context, request DeletePetRequestObject) (DeletePetResponseObject, error)
	// Find pet by ID.
	// (GET /pets/{petId})
	GetPetById(ctx context.Context, request GetPetByIdRequestObject) (GetPetByIdResponseObject, error)
	// Update an existing pet.
	// (PUT /pets/{petId})
	UpdatePet(ctx context.Context, request UpdatePetRequestObject) (UpdatePetResponseObject, error)
}

type StrictHandlerFunc func(ctx *fiber.Ctx, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// ListPets operation middleware
func (sh *strictHandler) ListPets(ctx *fiber.Ctx) error {
	var request ListPetsRequestObject

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.ListPets(ctx.UserContext(), request.(ListPetsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListPets")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ListPetsResponseObject); ok {
		if err := validResponse.VisitListPetsResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AddPet operation middleware
func (sh *strictHandler) AddPet(ctx *fiber.Ctx) error {
	var request AddPetRequestObject

	var body AddPetJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.AddPet(ctx.UserContext(), request.(AddPetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AddPet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AddPetResponseObject); ok {
		if err := validResponse.VisitAddPetResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeletePet operation middleware
func (sh *strictHandler) DeletePet(ctx *fiber.Ctx, petId PetId) error {
	var request DeletePetRequestObject

	request.PetId = petId

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.DeletePet(ctx.UserContext(), request.(DeletePetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeletePet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeletePetResponseObject); ok {
		if err := validResponse.VisitDeletePetResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetPetById operation middleware
func (sh *strictHandler) GetPetById(ctx *fiber.Ctx, petId PetId) error {
	var request GetPetByIdRequestObject

	request.PetId = petId

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetPetById(ctx.UserContext(), request.(GetPetByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPetById")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetPetByIdResponseObject); ok {
		if err := validResponse.VisitGetPetByIdResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdatePet operation middleware
func (sh *strictHandler) UpdatePet(ctx *fiber.Ctx, petId PetId) error {
	var request UpdatePetRequestObject

	request.PetId = petId

	var body UpdatePetJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.UpdatePet(ctx.UserContext(), request.(UpdatePetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdatePet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UpdatePetResponseObject); ok {
		if err := validResponse.VisitUpdatePetResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
