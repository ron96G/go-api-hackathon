// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

const (
	Petstore_authScopes = "petstore_auth.Scopes"
)

// Defines values for PetStatus.
const (
	Available PetStatus = "available"
	Pending   PetStatus = "pending"
	Sold      PetStatus = "sold"
)

// ApiProblem Based on https://www.rfc-editor.org/rfc/rfc9457.html
type ApiProblem struct {
	Detail   string  `json:"detail"`
	Instance *string `json:"instance,omitempty"`
	Status   int     `json:"status"`
	Title    string  `json:"title"`
	Type     string  `json:"type"`
}

// Category defines model for Category.
type Category struct {
	Name string `json:"name"`
}

// Pet defines model for Pet.
type Pet struct {
	Category Category `json:"category"`
	Id       *string  `json:"id,omitempty"`
	Name     string   `json:"name"`

	// Status pet status in the store
	Status *PetStatus `json:"status,omitempty"`
	Tags   []Tag      `json:"tags"`
}

// PetStatus pet status in the store
type PetStatus string

// Tag defines model for Tag.
type Tag struct {
	Name string `json:"name"`
}

// PetId defines model for PetId.
type PetId = string

// ErrorResponse Based on https://www.rfc-editor.org/rfc/rfc9457.html
type ErrorResponse = ApiProblem

// AddPetJSONRequestBody defines body for AddPet for application/json ContentType.
type AddPetJSONRequestBody = Pet

// UpdatePetJSONRequestBody defines body for UpdatePet for application/json ContentType.
type UpdatePetJSONRequestBody = Pet

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
